import java.io.IOException;public class OpenWindow { /** * @param args */ public static void main(String[] args) { W32API.HWND hwnd = User32.INSTANCE.FindWindow(0, "bb.txt - 记事本"); W32API.HWND childHwnd = User32.INSTANCE.FindWindowEx(hwnd,0,0,0); //User32.INSTANCE.SetForegroundWindow(hwnd); for (int i =0;i< 100;i++){ //keyPress(82); //User32.INSTANCE.PostMessage(hwnd, 82, 0,0); backKeyPress(childHwnd,82); } if (hwnd != null) { User32.INSTANCE.ShowWindow(hwnd, 9); User32.INSTANCE.SetForegroundWindow(hwnd); } else { try { System.out.println(" can't find the window !!"); Runtime.getRuntime().exec("NotePad.exe"); } catch (IOException e) { e.printStackTrace(); } } } public static void backKeyPress(W32API.HWND hwnd,int keyNum) { User32.INSTANCE.PostMessage(hwnd, 256 ,keyNum, 0); } public static void backKeyRelease(W32API.HWND hwnd,int keyNum) { User32.INSTANCE.PostMessage(hwnd, 257 ,keyNum, 0); } public static void keyPress(int keyNum) { User32.INSTANCE.keybd_event(keyNum,0,0,0); User32.INSTANCE.keybd_event(keyNum,0,"KEYEVENTF_KEYUP",0); }}还有两个接口 :import com.sun.jna.Native; public interface User32 extends W32API { User32 INSTANCE = (User32) Native.loadLibrary("user32", User32.class, DEFAULT_OPTIONS); boolean ShowWindow(HWND hWnd, int nCmdShow); boolean SetForegroundWindow(HWND hWnd); HWND FindWindow(String winClass, String title); HWND FindWindow(int winClass, String title); HWND FindWindowEx(HWND hWnd, HWND childWnd,int wParam,int lParam); HWND FindWindowEx(HWND hWnd, int childWnd,int wParam,int lParam); boolean PostMessage(HWND hWnd,Integer Msg,Integer wParam,Integer lParam); boolean PostMessage(HWND hWnd,int Msg,int wParam,int lParam); boolean PostMessage(HWND hWnd,String Msg,int wParam,int lParam); boolean PostMessage(HWND hWnd,String Msg,String wParam,String lParam); boolean PostMessage(HWND hWnd,int Msg,String wParam,String lParam); boolean PostMessage(HWND hWnd,int Msg,String wParam,int lParam); boolean PostMessage(HWND hWnd,String Msg,String wParam,int lParam); void keybd_event(String bVk,String bScan,String dwFlags,String dwExtralnfo); void keybd_event(int bVk,String bScan,String dwFlags,String dwExtralnfo); void keybd_event(String bVk,int bScan,int dwFlags,int dwExtralnfo); void keybd_event(int bVk,int bScan,int dwFlags,int dwExtralnfo); void keybd_event(int bVk,int bScan,String dwFlags,int dwExtralnfo); void keybd_event(String bVk,int bScan,String dwFlags,int dwExtralnfo); boolean SendMessage(HWND hWnd,Integer Msg,Integer wParam,Integer lParam); boolean SendMessage(HWND hWnd,int Msg,int wParam,int lParam); boolean SendMessage(HWND hWnd,String Msg,int wParam,int lParam); boolean SendMessage(HWND hWnd,String Msg,String wParam,String lParam); boolean SendMessage(HWND hWnd,int Msg,String wParam,String lParam); boolean SendMessage(HWND hWnd,int Msg,String wParam,int lParam); boolean SendMessage(HWND hWnd,String Msg,String wParam,int lParam);}import java.util.HashMap;import java.util.Map; import com.sun.jna.FromNativeContext;import com.sun.jna.Native;import com.sun.jna.Pointer;import com.sun.jna.PointerType;import com.sun.jna.win32.StdCallLibrary;import com.sun.jna.win32.W32APIFunctionMapper;import com.sun.jna.win32.W32APITypeMapper; @SuppressWarnings({ "unchecked", "serial" })public interface W32API extends StdCallLibrary { Map UNICODE_OPTIONS = new HashMap() { /** * */ private static final long serialVersionUID = 1L; { put(OPTION_TYPE_MAPPER, W32APITypeMapper.UNICODE); put(OPTION_FUNCTION_MAPPER, W32APIFunctionMapper.